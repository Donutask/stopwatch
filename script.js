"use strict"; const timerText = document.getElementById("time"), startButton = document.getElementById("startButton"), pauseButton = document.getElementById("pauseButton"), resumeButton = document.getElementById("resumeButton"), resetButton = document.getElementById("resetButton"); let timerRunning = !1, currentMilliseconds = 0, startedDate = null, offset = 0, tickRate = 40; const throttledRate = 1e3; let throttled, interval; const startKey = "stopwatch_start", offsetKey = "stopwatch_offset", runningKey = "stopwatch_state"; function Start() { timerRunning = !0, startedDate = new Date, currentMilliseconds = 0, offset = 0, Save(), UpdateButtons() } function Pause() { timerRunning = !1, offset = currentMilliseconds, startedDate = null, Save(), UpdateButtons() } function Resume() { timerRunning = !0, startedDate = new Date, offset = currentMilliseconds, Save(), UpdateButtons() } function Reset() { timerRunning = !1, currentMilliseconds = 0, startedDate = null, offset = 0, ShowTime(), Save(), UpdateButtons() } function UpdateButtons() { startButton.hidden = !0, pauseButton.hidden = !0, resumeButton.hidden = !0, resetButton.hidden = !0, timerRunning ? (timerText.classList.remove("inactive"), pauseButton.hidden = !1, resetButton.hidden = !1) : (timerText.classList.add("inactive"), currentMilliseconds > 0 ? (resumeButton.hidden = !1, resetButton.hidden = !1) : (startButton.hidden = !1, resumeButton.hidden = !0)) } function Tick() { timerRunning && (currentMilliseconds += throttled ? 1e3 : tickRate, ShowTime()) } function ShowTime() { let t = FormatTime(currentMilliseconds); timerText.textContent = t, currentMilliseconds <= 0 ? document.title = "Just a Stopwatch" : document.title = t.slice(0, -3) } function Resync() { currentMilliseconds = null == startedDate ? offset : Math.round((new Date).getTime() - startedDate.getTime()) + offset } function Save() { localStorage.setItem(startKey, null == startedDate ? "" : startedDate.getTime().toString()), localStorage.setItem(offsetKey, 0 != offset ? offset.toString() : ""), localStorage.setItem(runningKey, timerRunning ? "RUNNING" : "") } function Load() { let t = localStorage.getItem(offsetKey); if (null != t) { let e = parseInt(t); isNaN(e) || (offset = e) } if ("RUNNING" == localStorage.getItem(runningKey)) { timerRunning = !0; let n = localStorage.getItem(startKey); if (null != n) { let i = parseInt(n); isNaN(i) || (startedDate = new Date(i)) } } else timerRunning = !1 } function FormatTime(t) { if (Number.isNaN(t) || !Number.isFinite(t)) return "?"; let e = Math.floor(t / 6e4), n = Math.floor(t % 6e4 / 1e3), i = Math.floor(t % 1e3 / 10).toString(); if (i.length < 2 && (i = "0" + i), e >= 60) { let r = Math.round(e % 60).toString(); r.length < 2 && (r = "0" + r); let o = Math.round(n).toString(); return o.length < 2 && (o = "0" + o), Math.round(Math.floor(e / 60)) + ":" + r + ":" + o + "." + i } if (e >= 1) { let s = Math.round(n).toString(); return s.length < 2 && (s = "0" + s), Math.round(e) + ":" + s + "." + i } return Math.round(n) + "." + i } document.addEventListener("visibilitychange", function () { document.hidden ? (clearInterval(interval), throttled = !0, interval = setInterval(Tick, 1e3)) : (clearInterval(interval), interval = setInterval(Tick, tickRate), throttled = !1, Resync()) }), document.addEventListener("DOMContentLoaded", function () { Load(), Resync(), UpdateButtons(), ShowTime(), interval = setInterval(Tick, tickRate) });